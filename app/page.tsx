"use client";

import { useEffect, useMemo, useRef, useState } from "react";

/**
 * Next-gen Homepage (client component)
 * - Web 3.0 aesthetics: neon gradients, glassmorphism, animated particles
 * - Interactive cards with 3D tilt
 * - Client-side fetch from /api/readiness (avoids SSR relative URL issue)
 */

type ReadinessPayload = {
  readiness: { score: number; percentile: number };
  metrics: {
    correctToday: number;
    studyMinutes7d: number;
    objectivesMastered: number;
  };
  tips: string[];
};

export default function HomePage() {
  const [data, setData] = useState<ReadinessPayload | null>(null);
  const [loading, setLoading] = useState(true);

  // Fetch client-side to avoid "Failed to parse URL" during SSR.
  useEffect(() => {
    let cancelled = false;
    (async () => {
      try {
        const res = await fetch("/api/readiness", { cache: "no-store" });
        if (!res.ok) throw new Error("Failed to fetch readiness");
        const json = (await res.json()) as ReadinessPayload;
        if (!cancelled) setData(json);
      } catch (e) {
        console.error(e);
      } finally {
        if (!cancelled) setLoading(false);
      }
    })();
    return () => {
      cancelled = true;
    };
  }, []);

  const score = Math.round(data?.readiness.score ?? 0);
  const percentile = data?.readiness.percentile ?? 0;
  const tips = data?.tips ?? [];
  const metrics = data?.metrics ?? {
    correctToday: 0,
    studyMinutes7d: 0,
    objectivesMastered: 0,
  };

  return (
    <main className="relative min-h-[100dvh] overflow-hidden bg-gray-950 text-gray-100 antialiased">
      <HeroBackground />

      {/* Header */}
      <header className="relative z-10 mx-auto max-w-7xl px-6 pt-8 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <div className="h-6 w-6 rounded bg-gradient-to-br from-fuchsia-500 via-sky-400 to-emerald-400 animate-pulse" />
          <h1 className="text-xl sm:text-2xl font-semibold tracking-tight">
            AI Exam App <span className="text-sky-300/90">(Dev)</span>
          </h1>
        </div>
        <div className="hidden sm:flex items-center gap-3 text-xs sm:text-sm">
          <span className="rounded-full border border-white/10 bg-white/5 px-3 py-1 backdrop-blur">
            us-east-1
          </span>
          <span className="rounded-full border border-white/10 bg-white/5 px-3 py-1 backdrop-blur">
            Next.js 15
          </span>
        </div>
      </header>

      {/* Hero */}
      <section className="relative z-10 mx-auto max-w-7xl px-6 py-10 sm:py-14">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Left: Score card with ring and tilt */}
          <TiltCard className="col-span-1 lg:col-span-2">
            <div className="flex flex-col sm:flex-row items-center gap-8">
              <ProgressRing value={score} label="Readiness" />
              <div>
                <h2 className="text-2xl sm:text-3xl font-bold tracking-tight">
                  Personalized{" "}
                  <span className="text-transparent bg-clip-text bg-gradient-to-r from-fuchsia-400 via-sky-300 to-emerald-300">
                    Readiness
                  </span>
                </h2>
                <p className="mt-2 text-sm text-gray-300 max-w-prose">
                  Adaptive insights powered by LLMs. Your learning path updates
                  in real-time as you practice.
                </p>
                <ul className="mt-4 grid grid-cols-1 sm:grid-cols-3 gap-3">
                  <StatPill
                    label="Correct today"
                    value={metrics.correctToday}
                  />
                  <StatPill
                    label="Study minutes (7d)"
                    value={metrics.studyMinutes7d}
                  />
                  <StatPill
                    label="Objectives mastered"
                    value={metrics.objectivesMastered}
                  />
                </ul>
                <div className="mt-6 flex flex-wrap gap-3">
                  <ButtonGlow>Start Adaptive Session</ButtonGlow>
                  <GhostButton>Review Weak Areas</GhostButton>
                </div>
              </div>
            </div>
          </TiltCard>

          {/* Right: Tips list */}
          <GlassCard>
            <h3 className="text-lg font-semibold">Next Study Tips</h3>
            <p className="mt-1 text-xs text-gray-400">
              Generated by the AI Adaptive Engine
            </p>
            <ul className="mt-4 space-y-3">
              {(loading ? Array.from({ length: 3 }) : tips).map((t: any, i) => (
                <li
                  key={i}
                  className="group rounded-lg border border-white/10 bg-white/5 p-3 backdrop-blur transition hover:bg-white/10"
                >
                  {loading ? (
                    <div className="h-4 w-3/4 animate-pulse rounded bg-white/10" />
                  ) : (
                    <div className="flex items-start gap-2">
                      <span className="mt-1 h-2 w-2 shrink-0 rounded-full bg-gradient-to-r from-fuchsia-400 to-sky-300" />
                      <span className="text-sm text-gray-100/90">{t}</span>
                    </div>
                  )}
                </li>
              ))}
            </ul>
          </GlassCard>
        </div>

        {/* Bottom row: “Web3 vibe” panels */}
        <div className="mt-6 grid grid-cols-1 lg:grid-cols-3 gap-6">
          <GlassCard className="relative overflow-hidden">
            <CardHeading>Tokenized Achievements</CardHeading>
            <p className="mt-2 text-sm text-gray-300">
              Earn badges for mastered objectives and share verifiable progress.
            </p>
            <FloatingOrbs />
          </GlassCard>

          <GlassCard>
            <CardHeading>Real-time Cohort Insights</CardHeading>
            <p className="mt-2 text-sm text-gray-300">
              Instantly see where your cohort struggles and intervene with
              targeted tips.
            </p>
          </GlassCard>

          <GlassCard>
            <CardHeading>Privacy First</CardHeading>
            <p className="mt-2 text-sm text-gray-300">
              Minimal PII, encrypted at rest and in transit. Your data—your
              control.
            </p>
          </GlassCard>
        </div>
      </section>
    </main>
  );
}

/* ===========================
   UI Building Blocks
=========================== */

function ProgressRing({ value, label }: { value: number; label?: string }) {
  const clamped = Math.max(0, Math.min(100, value));
  return (
    <div className="relative grid place-items-center">
      <div className="relative h-36 w-36">
        <svg
          viewBox="0 0 36 36"
          className="h-full w-full drop-shadow-[0_0_10px_rgba(56,189,248,0.35)]"
        >
          <defs>
            <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="0%">
              <stop offset="0%" stopColor="#a78bfa" />
              <stop offset="50%" stopColor="#38bdf8" />
              <stop offset="100%" stopColor="#34d399" />
            </linearGradient>
          </defs>
          <path
            stroke="url(#grad)"
            strokeWidth="5"
            strokeLinecap="round"
            fill="none"
            strokeDasharray={`${clamped}, 100`}
            d="M18 2a16 16 0 1 1 0 32 16 16 0 1 1 0-32"
          />
          <path
            className="text-gray-800/60"
            stroke="currentColor"
            strokeWidth="5"
            fill="none"
            d="M18 2a16 16 0 1 1 0 32 16 16 0 1 1 0-32"
          />
        </svg>
        <div className="absolute inset-0 grid place-items-center">
          <div className="text-center">
            <div className="text-3xl font-bold leading-none">{clamped}%</div>
            <div className="mt-1 text-[10px] uppercase tracking-widest text-gray-300">
              {label ?? "Score"}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function StatPill({ label, value }: { label: string; value: number | string }) {
  return (
    <li className="rounded-xl border border-white/10 bg-white/5 px-4 py-3 text-center backdrop-blur transition hover:bg-white/10">
      <div className="text-lg font-semibold">{value}</div>
      <div className="text-[11px] uppercase tracking-wider text-gray-300">
        {label}
      </div>
    </li>
  );
}

function ButtonGlow({ children }: { children: React.ReactNode }) {
  return (
    <button className="relative overflow-hidden rounded-xl border border-sky-300/30 bg-gradient-to-br from-fuchsia-950/40 via-sky-900/20 to-emerald-900/20 px-4 py-2 text-sm font-medium text-gray-100 backdrop-blur transition hover:shadow-[0_0_35px_rgba(56,189,248,0.35)]">
      <span className="absolute inset-0 -z-10 bg-[radial-gradient(circle_at_30%_20%,rgba(168,85,247,0.25),transparent_40%),radial-gradient(circle_at_70%_60%,rgba(56,189,248,0.25),transparent_45%)]" />
      {children}
    </button>
  );
}

function GhostButton({ children }: { children: React.ReactNode }) {
  return (
    <button className="rounded-xl border border-white/10 bg-white/0 px-4 py-2 text-sm text-gray-200 transition hover:bg-white/5">
      {children}
    </button>
  );
}

function CardHeading({ children }: { children: React.ReactNode }) {
  return (
    <h4 className="text-base font-semibold tracking-tight">
      <span className="text-transparent bg-clip-text bg-gradient-to-r from-fuchsia-300 via-sky-300 to-emerald-300">
        {children}
      </span>
    </h4>
  );
}

function GlassCard({
  children,
  className = "",
}: {
  children: React.ReactNode;
  className?: string;
}) {
  return (
    <div
      className={`rounded-2xl border border-white/10 bg-gradient-to-b from-white/10 to-white/5 p-5 backdrop-blur ${className}`}
    >
      {children}
    </div>
  );
}

/* 3D tilt card */
function TiltCard({
  children,
  className = "",
}: {
  children: React.ReactNode;
  className?: string;
}) {
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const el = ref.current;
    if (!el) return;

    const onMove = (e: MouseEvent) => {
      const rect = el.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const rx = (y / rect.height - 0.5) * -8; // tilt X
      const ry = (x / rect.width - 0.5) * 8; // tilt Y
      el.style.transform = `perspective(900px) rotateX(${rx}deg) rotateY(${ry}deg) translateZ(0)`;
    };

    const onLeave = () => {
      el.style.transform =
        "perspective(900px) rotateX(0deg) rotateY(0deg) translateZ(0)";
    };

    el.addEventListener("mousemove", onMove);
    el.addEventListener("mouseleave", onLeave);
    return () => {
      el.removeEventListener("mousemove", onMove);
      el.removeEventListener("mouseleave", onLeave);
    };
  }, []);

  return (
    <div
      ref={ref}
      className={`rounded-2xl border border-white/10 bg-gradient-to-b from-white/10 to-white/5 p-6 backdrop-blur transition-transform will-change-transform ${className}`}
    >
      {children}
    </div>
  );
}

/* Animated gradient + particles background */
function HeroBackground() {
  const canvasRef = useRef<HTMLCanvasElement | null>(null);

  // Resize Canvas
  useEffect(() => {
    const canvas = canvasRef.current!;
    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    let raf = 0;
    const DPR = Math.min(window.devicePixelRatio || 1, 2);

    const resize = () => {
      canvas.width = Math.floor(window.innerWidth * DPR);
      canvas.height = Math.floor(window.innerHeight * DPR);
    };
    resize();
    window.addEventListener("resize", resize);

    const dots = new Array(80).fill(0).map(() => ({
      x: Math.random() * canvas.width,
      y: Math.random() * canvas.height,
      vx: (Math.random() - 0.5) * 0.25,
      vy: (Math.random() - 0.5) * 0.25,
      r: Math.random() * 1.8 + 0.6,
    }));

    const draw = () => {
      // soft dark background
      ctx.fillStyle = "rgba(2,6,23,0.55)"; // slate-950 overlay
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // gradient haze
      const grad = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
      grad.addColorStop(0, "rgba(168,85,247,0.10)"); // fuchsia-500
      grad.addColorStop(0.5, "rgba(56,189,248,0.10)"); // sky-400
      grad.addColorStop(1, "rgba(52,211,153,0.10)"); // emerald-400
      ctx.fillStyle = grad;
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // particles
      ctx.fillStyle = "rgba(255,255,255,0.55)";
      for (const d of dots) {
        d.x += d.vx;
        d.y += d.vy;
        if (d.x < 0 || d.x > canvas.width) d.vx *= -1;
        if (d.y < 0 || d.y > canvas.height) d.vy *= -1;
        ctx.beginPath();
        ctx.arc(d.x, d.y, d.r, 0, Math.PI * 2);
        ctx.fill();
      }

      raf = requestAnimationFrame(draw);
    };
    raf = requestAnimationFrame(draw);

    return () => {
      window.removeEventListener("resize", resize);
      cancelAnimationFrame(raf);
    };
  }, []);

  return (
    <>
      <div className="pointer-events-none absolute inset-0 z-0 [mask-image:radial-gradient(60%_50%_at_50%_0%,black,transparent)]">
        <div className="absolute -top-32 left-1/2 h-[40rem] w-[40rem] -translate-x-1/2 rounded-full bg-gradient-to-br from-fuchsia-500/30 via-sky-400/30 to-emerald-400/30 blur-3xl" />
      </div>
      <canvas
        ref={canvasRef}
        className="pointer-events-none absolute inset-0 -z-10"
        style={{ display: "block" }}
      />
    </>
  );
}

function FloatingOrbs() {
  // purely decorative: subtle animated orbs
  const orbs = useMemo(
    () =>
      Array.from({ length: 3 }).map((_, i) => ({
        key: i,
        style: [
          "top-2 left-3 h-16 w-16",
          "bottom-4 right-6 h-12 w-12",
          "top-1/2 left-1/2 h-10 w-10 -translate-x-1/2 -translate-y-1/2",
        ][i],
        delay: i * 400,
      })),
    []
  );

  return (
    <div className="pointer-events-none absolute inset-0">
      {orbs.map((o) => (
        <span
          key={o.key}
          className={`absolute rounded-full bg-gradient-to-br from-fuchsia-400/25 via-sky-300/25 to-emerald-300/25 blur-2xl`}
          style={{
            animation: `float ${
              6000 + o.delay
            }ms ease-in-out infinite alternate`,
            boxShadow: "0 0 40px rgba(56,189,248,0.25)",
          }}
        />
      ))}
      <style jsx global>{`
        @keyframes float {
          0% {
            transform: translateY(0px) scale(1);
            opacity: 0.8;
          }
          100% {
            transform: translateY(-10px) scale(1.05);
            opacity: 1;
          }
        }
      `}</style>
    </div>
  );
}
